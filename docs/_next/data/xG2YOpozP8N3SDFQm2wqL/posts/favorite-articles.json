{"pageProps":{"postContent":"<p>I wanted to share a random assortment of blog posts and articles that I stumbled upon in the past and that I keep returning to from time to time.<br>\nAll of them are tech and IT related, though not all are about coding.</p>\n<p>There is no exact rule why I picked them. Mostly these are just reads that stuck in my head, and for one reason or other I keep returning to. Sometimes it's because I really like the writing style and sometimes to refresh myself on the knowledge presented in them.<br>\nOftentimes I will remember an article because it made me think differently or see an old idea in new light, which is something that I find very important these days.</p>\n<p>Below are the links with short descriptions.<br>\nI hope you will find something valuable here.</p>\n<hr>\n<h2>Software disenchantment (tonsky.me, 2018)</h2>\n<p>For me this was a real eye-opener. The author describes how modern software became too big, slow and too bloated. He also contrasts software development with other industries to show how the standards differ between them. I believe that even if you disagree with some of the statements in here, this is still a valuable read which gets you thinking about modern day software that surrounds us.<br>\nIt does sound a little like a long rant, so keep that in mind.</p>\n<p><a href=\"https://tonsky.me/blog/disenchantment\">https://tonsky.me/blog/disenchantment</a></p>\n<h2>The engineer/manager pendulum (charity.wtf, 2017)</h2>\n<p>A good colleague from work, who used to be my manager, showed me this one after one of our many discussions about the job and role of senior software engineer and \"what to do next\".</p>\n<p>The ideas described here help you look at the old \"engineer vs manager\" dilemma in fresh light. The author proposes to look at the two roles more like two parallel paths that you can switch between, rather than the more common approach of advancing to a management role when you have reached your \"limits\" as an engineer.<br>\nIt reminds us that both paths give valuable experience that can be later used in a different role, but doing both <em>at the same time</em> may not be such a good idea.</p>\n<p><a href=\"https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/\">https://charity.wtf/2017/05/11/the-engineer-manager-pendulum</a></p>\n<h2>Things Dan Abramov doesn't know (overreacted.io, 2018)</h2>\n<p>There are a lot of interesting articles on Overreacted, blog of Dan Abramov (of React fame). What's great is that the blog covers not only React and it's internals, Javascript and frontend development. You can find very interesting reads about coding in general and about mental models that Dan keeps in his head.</p>\n<p>In this article author simply lists the things he is not proficient with and ideas he has not yet grasped.<br>\nFor me this piece was very refreshing as it reminded me that some of the biggest \"rockstars\" of programming are still just people like us and don't possess \"all the knowledge in the world\".</p>\n<p><a href=\"https://overreacted.io/things-i-dont-know-as-of-2018/\">https://overreacted.io/things-i-dont-know-as-of-2018</a></p>\n<h2>How to deal with side effects in a pure functional way (jrsinclair.com, 2018)</h2>\n<p>This is a long and detailed read that guides you step by step through the mental process (and implementation in JS) of managing side effects in a pure way.<br>\nI have read lots of similar articles about FP both in javascript and in general. What I specifically like about this one is that it's very thorough and starts off simply but slowly gets more and more complicated along the way. It describes all the complexities of handling side effects, but also many other FP terms and ideas.</p>\n<p><a href=\"https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/\">https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript</a></p>\n","title":"Some of my favourite articles and blog posts","date":"2021-04-07"},"__N_SSG":true}